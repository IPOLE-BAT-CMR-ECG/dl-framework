[project]
name = "projection"
version = "0.1.0"
description = "Add your description here"
authors = [
    { name = "Dominik Filliger", email = "dominik.filliger@students.fhnw.ch" },
    { name = "Noah Leuenberger", email = "noah.leuenberger@students.fhnw.ch" }
]
dependencies = [
    "timm @ git+https://github.com/oetu/pytorch-image-models/",
    "matplotlib>=3.9.2",
    "seaborn>=0.13.2",
    "scikit-learn>=1.5.2",
    "torch>=2.4.0",
    "tqdm>=4.66.6",
    "nibabel>=5.3.2",
    "imageio>=2.36.0",
    "rootutils>=1.0.7",
    "torchvision==0.19.0",
    "lightning>=2.4.0",
    "hydra-core>=1.3.2",
    "lightly>=1.5.13",
    "lightning-bolts>=0.7.0",
    "neptune>=1.13.0",
    "hydra-colorlog>=1.2.0",
    "rich>=13.9.4",
    "wandb>=0.19.0",
    "boto3>=1.35.84",
    "hydra-optuna-sweeper>=1.2.0",
    "sagemaker>=2.237.1",
    "grad-cam>=1.5.4",
    "h5py>=3.12.1",
    "wfdb>=4.2.0",
]

readme = "README.md"
requires-python = "== 3.12.5"

[tool.rye.scripts]
preprocess = "python src/data/preprocessing/main.py"
train = "python src/train.py"
eval = "python src/eval.py"
generate_artifacts = "python src/generate_model_artifacts.py"
test = "pytest tests/ -vv --junitxml=reports/junit.xml"
partition = "python src/data/partitioning.py"
build_docs = "mkdocs build"
docs = "mkdocs serve"

[tool.rye]
managed = true
virtual = true
dev-dependencies = [
    "jupyter>=1.1.1",
    "ipykernel>=6.29.5",
    "plotly>=5.24.1",
    "umap-learn>=0.5.7",
    "numba>=0.60.0",
    "pytest>=8.3.4",
    "pre-commit>=4.0.1",
    "mkdocstrings-python>=1.13.0",
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.5.49",
    "dvc[s3]>=3.59.0",
    "dvc-ssh>=4.2.1",
]
universal = true

[tool.pytest.ini_options]
addopts = [
  "--color=yes",
  "--durations=0",
  "--strict-markers",
  "--doctest-modules",
]
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::UserWarning",
]
log_cli = "True"
markers = [
  "slow: slow tests",
]
minversion = "6.0"
testpaths = "tests/"

[tool.coverage.report]
exclude_lines = [
    "pragma: nocover",
    "raise NotImplementedError",
    "raise NotImplementedError()",
    "if __name__ == .__main__.:",
]
